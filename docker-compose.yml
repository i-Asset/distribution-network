version: '3.3'

services:
  distribution-network:
    image: iassetplatform/distribution-network
    build: server
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1
      - kafka2
      - kafka3

    # Local deployment:
    environment:
      POSTGRES_HOST: 172.27.89.198
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DNET_DOCKER_HOST_IP: iasset
      DNET_IASSET_SERVER: https://iasset.salzburgresearch.at
#      DNET_IASSET_SERVER: https://iasset
      DNET_SQLALCHEMY_DATABASE_DRIVER: postgresql+psycopg2
      DNET_SQLALCHEMY_DATABASE_NAME: distributionnetworkdb
      DNET_KAFKA_BOOTSTRAP_SERVER: kafka1:19092,kafka2:19093,kafka3:19094

    # no-docker deployment
#    environment:
#      DNET_IASSET_SERVER: https://iasset.salzburgresearch.at
#      DNET_SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@${DOCKER_HOST_IP:-127.0.0.1}:5432/distributionnetworkdb
#      DNET_KAFKA_BOOTSTRAP_SERVER: ${DOCKER_HOST_IP:-127.0.0.1}:9092,${DOCKER_HOST_IP:-127.0.0.1}:9093,${DOCKER_HOST_IP:-127.0.0.1}:9094
    ports:
      - "1908:1908"
#    network_mode: host
    networks:
      - infra
    restart: always

#  postgresdb:
#    image: postgres:9.5.25-alpine
#    hostname: postgresdb
#    restart: always
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: distributionnetworkdb
#    ports:
#      - "5432:5432"
#    volumes:
#    - ./setup/postgresql/initdb/:/docker-entrypoint-initdb.d/

  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/zoo1/data:/data
#      - ./zk-multiple-kafka-multiple/zoo1/datalog:/datalog

  zoo2:
    image: zookeeper:3.4.9
    hostname: zoo2
    ports:
      - "2182:2182"
    environment:
      ZOO_MY_ID: 2
      ZOO_PORT: 2182
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/zoo2/data:/data
#      - ./zk-multiple-kafka-multiple/zoo2/datalog:/datalog

  zoo3:
    image: zookeeper:3.4.9
    hostname: zoo3
    ports:
      - "2183:2183"
    environment:
      ZOO_MY_ID: 3
      ZOO_PORT: 2183
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/zoo3/data:/data
#      - ./zk-multiple-kafka-multiple/zoo3/datalog:/datalog


  kafka1:
    image: confluentinc/cp-kafka:6.1.0
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
#    healthcheck:
#      test: ['CMD', '-c', 'echo "ruok" | nc localhost 9092 && echo "imok"']
#      timeout: 45s
#      interval: 10s
#      retries: 10

  kafka2:
    image: confluentinc/cp-kafka:6.1.0
    hostname: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
#    healthcheck:
#      test: ['CMD', '-c', 'echo "ruok" | nc localhost 9093 && echo "imok"']
#      timeout: 45s
#      interval: 10s
#      retries: 10

  kafka3:
    image: confluentinc/cp-kafka:6.1.0
    hostname: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - infra
#    volumes:
#      - ./zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
#    healthcheck:
#      test: ['CMD', '-c', 'echo "ruok" | nc localhost 9094 && echo "imok"']
#      timeout: 45s
#      interval: 10s
#      retries: 10

networks:
  infra:
    external:
      name: iassetinfrastaging_default
